{"version":3,"file":"static/js/93.f257288f.chunk.js","mappings":"8x02CAEA,MAAMA,EAWLC,WAAAA,CAAYC,GAkBZC,EAAA,KAAMC,GA5BNC,EAAA,oBAAc,GACdA,EAAA,4BAAsB,GACtBA,EAAA,wBAAkB,GAClBA,EAAA,4BAAuB,CAAE,GACzBF,EAAA,KAAAG,OAAA,GACAH,EAAA,KAAAI,OAAA,GAEAF,EAAA,qBAAe,SACfA,EAAA,uBAAiB,SAGhBG,KAAKC,eAAiBP,EAAQO,eAG9BC,EAAAF,KAAKF,EAAmBJ,EAAQS,OAAOC,8BAGvCF,EAAAF,KAAKD,EAAmB,IAAIM,GAG5BC,EAAAN,KAAKD,GAAiBQ,KAAO,IAAIC,SAAQ,CAACC,EAASC,KAClDV,KAAKW,oBAAsBF,CAAA,IAG5BT,KAAKY,Y,6CAAcC,CAAAb,KAAKJ,EAAAkB,GAALC,KAAAf,KAAgBN,EACnC,CA6CDsB,OAAAA,CAAQtB,GAEPY,EAAAN,KAAKD,GAAiBkB,YAAY,CACjCC,OAAS,UACTC,KAAAzB,GACC,CAAEA,GACJ,CAED0B,YAAAA,CAAa1B,GACZY,EAAAN,KAAKD,GAAiBkB,YAAY,CAACC,OAAQ,eAAgBG,QAAA3B,GAC3D,CAED4B,MAAAA,CAAO5B,GACNY,EAAAN,KAAKD,GAAiBkB,YAAY,CAACC,OAAQ,SAAUG,QAAA3B,GACrD,CAED,eAAM6B,CAAU7B,GAEf,OAAO,IAAIc,SAAQ,CAACC,EAASC,KAC5B,GAAGc,OAAOC,KAAKzB,KAAK0B,sBAAsBC,SAASjC,EAAQkC,OAC1D,OAAOnB,IAGRT,KAAK0B,qBAAqBhC,EAAQkC,OAASnB,EAC3CH,EAAAN,KAAKD,GAAiBkB,YAAY,CAACC,OAAQ,YAAaG,QAAA3B,GAAS,IAC/DmC,OAAMpB,GAASqB,QAAQC,MAAMtB,IAChC,CAEDuB,KAAAA,GACC1B,EAAAN,KAAKD,GAAiBkB,YAAY,CAACC,OAAQ,aAC3C,CAEDe,GAAAA,CAAIvC,GACHY,EAAAN,KAAKD,GAAiBkB,YAAY,CAACC,OAAQ,SAAUG,QAAA3B,GACrD,CAEDwC,SAAAA,CAAUxC,GACTY,EAAAN,KAAKD,GAAiBkB,YAAY,CAACC,OAAQ,YAAaG,QAAA3B,GACxD,CAEDyC,MAAAA,CAAOzC,GAENY,EAAAN,KAAKD,GAAiBkB,YAAY,CAACC,OAAQ,YAAaG,QAAA3B,GACxD,EA7GDI,EAAA,IAAAsC,QACArC,EAAA,IAAAqC,QAuBMxC,EAAA,IAAAyC,QAAAvB,EAAU,eAACpB,GAEhB,OAAAY,EAAAN,KAAKD,GAAiBkB,YAAY,CACjCC,OAAQ,OACRf,OAAQG,EAAAN,KAAKF,GACbwC,MAAO5C,EAAOS,OAAOoC,YACrBC,OAAQ9C,EAAOS,OAAOsC,aACtBpB,QAAS3B,EAAO2B,SACd,CAACf,EAAAN,KAAKF,KAGTQ,EAAAN,KAAKD,GAAiB2C,UAAajC,IAClC,OAAQA,EAAEkC,KAAKzB,QACd,IAAK,gBACJlB,KAAKW,sBACL,MACD,IAAK,mBACJ,MACD,IAAK,eACDF,EAAEkC,KAAKC,IACT5C,KAAK0B,qBAAqBjB,EAAEkC,KAAKC,IAAInC,EAAEkC,KAAKC,IAE7C,MACD,IAAK,cACJ5C,KAAK6C,aAAapC,EAAEkC,KAAKG,KACzB,MACD,IAAK,gBACJ9C,KAAK+C,iBACL,MACD,IAAK,cACJ/C,KAAKgD,aAAavC,EAAEkC,KAAKM,QAE1B,QAGI3C,EAAAN,KAAKD,GAAiBQ,KAE5BP,KAAKC,gBAAe,IAEb,CACP,C","sources":["../node_modules/@3d-dice/dice-box/src/components/world.offscreen.js"],"sourcesContent":["import worldWorker from './offscreenCanvas.worker?worker&inline' // using vite.js worker import - this will be compiled away\n\nclass WorldOffScreen {\n\tinitialized = false\n\toffscreenWorkerInit = false\n\tthemeLoadedInit = false\n\tpendingThemePromises = {}\n\t#offscreenCanvas\n\t#OffscreenWorker\n\t// onInitComplete = () => {} // init callback\n\tonRollResult = () => {} // individual die callback\n\tonRollComplete = () => {} // roll group callback\n\n\tconstructor(options){\n\t\tthis.onInitComplete = options.onInitComplete\n\n\t\t// transfer control offscreen\n\t\tthis.#offscreenCanvas = options.canvas.transferControlToOffscreen()\n\n\t\t// initialize 3D World in which BabylonJS runs\n\t\tthis.#OffscreenWorker = new worldWorker()\n\t\t// need to initialize the web worker and get confirmation that initialization is complete before other scripts can run\n\t\t// set a property on the worker to a promise that is resolve when the proper message is returned from the worker\n\t\tthis.#OffscreenWorker.init = new Promise((resolve, reject) => {\n\t\t\tthis.offscreenWorkerInit = resolve\n\t\t})\n\n\t\tthis.initialized = this.#initScene(options)\n\t}\n\n\t// initialize the babylon scene\n\tasync #initScene(config) {\n\t\t// initialize the offscreen worker\n\t\tthis.#OffscreenWorker.postMessage({\n\t\t\taction: \"init\",\n\t\t\tcanvas: this.#offscreenCanvas,\n\t\t\twidth: config.canvas.clientWidth,\n\t\t\theight: config.canvas.clientHeight,\n\t\t\toptions: config.options,\n\t\t}, [this.#offscreenCanvas])\n\n\t\t// handle messages from offscreen BabylonJS World\n\t\tthis.#OffscreenWorker.onmessage = (e) => {\n\t\t\tswitch( e.data.action ) {\n\t\t\t\tcase \"init-complete\":\n\t\t\t\t\tthis.offscreenWorkerInit() //fulfill promise so other things can run\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"connect-complete\":\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"theme-loaded\":\n\t\t\t\t\tif(e.data.id){\n\t\t\t\t\t\tthis.pendingThemePromises[e.data.id](e.data.id)\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'roll-result':\n\t\t\t\t\tthis.onRollResult(e.data.die)\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'roll-complete':\n\t\t\t\t\tthis.onRollComplete()\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'die-removed':\n\t\t\t\t\tthis.onDieRemoved(e.data.rollId)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// await Promise.all([this.#OffscreenWorker.init])\n\t\tawait this.#OffscreenWorker.init\n\n\t\tthis.onInitComplete(true)\n\n\t\treturn true\n\t}\n\n\tconnect(port){\n\t\t// Setup the connection: Port 1 is for this.#OffscreenWorker\n\t\tthis.#OffscreenWorker.postMessage({\n\t\t\taction : \"connect\",\n\t\t\tport\n\t\t},[ port ])\n\t}\n\n\tupdateConfig(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"updateConfig\", options});\n\t}\n\n\tresize(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"resize\", options});\n\t}\n\n\tasync loadTheme(options) {\n\t\t// prevent multiple requests of the same theme\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif(Object.keys(this.pendingThemePromises).includes(options.theme)) {\n\t\t\t\treturn resolve()\n\t\t\t}\n\n\t\t\tthis.pendingThemePromises[options.theme] = resolve\n\t\t\tthis.#OffscreenWorker.postMessage({action: \"loadTheme\", options})\n\t\t}).catch(error => console.error(error))\n\t}\n\n\tclear(){\n\t\tthis.#OffscreenWorker.postMessage({action: \"clearDice\"})\n\t}\n\n\tadd(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"addDie\", options})\n\t}\n\t\n\taddNonDie(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"addNonDie\", options})\n\t}\n\n\tremove(options){\n\t\t// remove the die from the render\n\t\tthis.#OffscreenWorker.postMessage({action: \"removeDie\", options})\n\t}\n}\n\nexport default WorldOffScreen"],"names":["L","constructor","l","m","W","d","b","G","this","onInitComplete","h","canvas","transferControlToOffscreen","N","V","init","Promise","Z","c","offscreenWorkerInit","initialized","a","Y","call","connect","postMessage","action","port","updateConfig","options","resize","loadTheme","Object","keys","pendingThemePromises","includes","theme","catch","console","error","clear","add","addNonDie","remove","WeakMap","WeakSet","width","clientWidth","height","clientHeight","onmessage","data","id","onRollResult","die","onRollComplete","onDieRemoved","rollId"],"sourceRoot":""}